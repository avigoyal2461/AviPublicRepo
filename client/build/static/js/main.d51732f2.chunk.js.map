{"version":3,"sources":["components/navigation/NavBar.js","components/botstatus/BotStatus.js","components/botstatus/BotStatuses.js","components/contractcreation/genesisdesign/GenesisRoof.js","components/contractcreation/genesisdesign/GenesisDesignCard.js","components/contractcreation/genesisdesign/GenesisDesigns.js","components/contractcreation/genesisdesign/GenesisDesign.js","components/contractcreation/genesisdesign/FinalizedQuote.js","components/contractcreation/genesisdesign/FinalizeQuote.js","components/contractcreation/genesisdesign/Quote.js","components/contractcreation/genesisdesign/CreateQuote.js","config.js","components/contractcreation/genesisdesign/CreateContract.js","components/contractcreation/ContractCreationNav.js","components/contractcreation/FinalizeContract.js","components/contractcreation/FinalizedContract.js","components/contractcreation/Disqualify.js","components/contractcreation/ContractCreation.js","components/login/Login.js","components/login/Logout.js","components/login/ResetPassword.js","components/botstatus/BotTask.js","components/botstatus/BotTasks.js","components/MainContent.js","App.js","components/login/useToken.js","components/login/useEmail.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","marginBottom","spacing","menuButton","marginRight","title","withRouter","props","history","userEmail","classes","React","useState","anchorEl","setAnchorEl","open","Boolean","handleMenuClick","pageURL","push","className","AppBar","position","Toolbar","Typography","variant","IconButton","edge","color","aria-label","onClick","event","currentTarget","id","anchorOrigin","vertical","horizontal","keepMounted","transformOrigin","onClose","MenuItem","BotStatus","status","TableRow","TableCell","component","scope","name","align","function","lastUpdateTime","Button","href","BotStatuses","statuses","setStatuses","useEffect","getStatuses","a","fetchStatuses","setInterval","fetch","res","json","data","TableContainer","Paper","Table","TableHead","TableBody","map","GenesisRoof","roof","tilt","azimuth","availability","moduleQuantity","GenesisDesignCard","design","Card","Grid","container","justify","alignItems","item","xs","lg","p","Link","opportunityId","target","opportunity","opportunityName","Divider","CardContent","m","Chip","label","moduleType","icon","solarPanel","roofs","reduce","b","GenesisDesigns","designs","reverse","GenesisDesign","usage","style","height","sm","salesforceId","createDesignTask","completed","sunnovaName","size","powerIcon","FinalizedQuote","finalizedQuote","List","ListItemText","primary","secondary","sunnovaFinalized","contractDownloaded","salesforceUpdated","combinedPacketDownloaded","contractUploaded","emailSent","genesisUploaded","rateChangeReasons","value","FinalizeQuote","onFinalize","full","asphalt","metal","flat","ground","parking","battery","clay","concrete","installationType","setInstallationType","installationTypeParameters","handleInstallationCheck","checked","sunnovaUrl","setSunnovaUrl","setOpportunityId","salesforceNotes","setSalesforceNotes","emailNotes","setEmailNotes","rateChangeReason","setRateChangeReason","permitPayer","setPermitPayer","createSalesforceContract","setCreateSalesforceContract","TextField","onChange","e","multiline","InputLabel","Select","labelId","option","FormGroup","FormLabel","FormControlLabel","control","Checkbox","installationData","Object","entries","filter","type","installation_type","sunnova_url","opportunity_id","quote_notes","salesperson_notes","permit_payer","loi_rate_change_reason","user_email","create_salesforce_object","card","lineHeight","Quote","quote","valid","financingType","purchaseMethod","price","systemSize","solarRate","monthlySunnovaPayment","estimatedProduction","newUtilityBill","totalMonthlyElectrityCost","utilityRate","yearOneSavings","savingsOverTermLength","lifetimePayment","pricePerWatt","totalEpc","contractId","finalized","finalizeSunnovaQuoteTask","dataWithQuote","quote_id","CreateQuote","onCreateQuote","designId","salesforcePurchaseMethod","setSalesforcePurchaseMethod","sunnovaPurchaseMethod","setSunnovaPurchaseMethod","setPrice","escalator","setEscalator","design_id","salesforce_purchase_method","sunnova_purchase_method","replace","salesforce_escalator","APIURL","CreateContract","setDesigns","setFormSubmitted","createQuoteOpen","setCreateQuoteOpen","useParams","find","toString","method","headers","body","JSON","stringify","then","alert","md","width","updatedDesigns","updatedQuotes","sunnovaQuotes","ContractCreationNav","ListItem","button","FinalizeContract","setId","finalizeContract","catch","err","console","log","to","FinalizedContract","setFinalizedQuote","fetchFinalizedQuote","getFinalizedQuote","finalizeQuote","Disqualify","notes","setNotes","lostComments","setLostComments","stageStatus","setStageStatus","reasonLost","setReasonLost","location","useLocation","parsed","queryString","parse","search","postDisqualify","autoComplete","reason","email","ContractCreation","path","useRouteMatch","formSubmitted","fetchDesigns","getDesigns","children","Login","setToken","setUserEmail","setEmail","password","setPassword","loginError","setLoginError","loginUser","handleLoginSubmit","token","Logout","ResetPassword","oldPassword","setOldPassword","newPassword","setNewPassword","newPasswordSecondary","setNewPasswordSecondary","resetSuccess","setResetSuccess","old_password","new_password","BotTask","task","additionalInfo","completedTime","BotTasks","taskType","tasks","setTasks","getTasks","fetchTasks","includes","MainContent","Container","App","tokenString","localStorage","getItem","getToken","userToken","setItem","useToken","emailString","getEmail","useEmail","NavBar","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d51732f2.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport Menu from \"@material-ui/core/Menu\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n        marginBottom: theme.spacing(2),\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n    },\r\n}));\r\n\r\nconst Navbar = (props) => {\r\n    const { history, userEmail } = props;\r\n    const classes = useStyles();\r\n    const [anchorEl, setAnchorEl] = React.useState(null);\r\n    const open = Boolean(anchorEl);\r\n\r\n    const handleMenu = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleMenuClick = (pageURL) => {\r\n        history.push(pageURL);\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <Typography variant=\"h6\" className={classes.title}>\r\n                        AutoBot\r\n                        {userEmail && <Typography>{userEmail}</Typography>}\r\n                    </Typography>\r\n\r\n                    <div>\r\n                        <IconButton\r\n                            edge=\"start\"\r\n                            className={classes.menuButton}\r\n                            color=\"inherit\"\r\n                            aria-label=\"menu\"\r\n                            onClick={handleMenu}\r\n                        >\r\n                            <MenuIcon />\r\n                        </IconButton>\r\n                        <Menu\r\n                            id=\"menu-appbar\"\r\n                            anchorEl={anchorEl}\r\n                            anchorOrigin={{\r\n                                vertical: \"top\",\r\n                                horizontal: \"right\",\r\n                            }}\r\n                            keepMounted\r\n                            transformOrigin={{\r\n                                vertical: \"top\",\r\n                                horizontal: \"right\",\r\n                            }}\r\n                            open={open}\r\n                            onClose={() => setAnchorEl(null)}\r\n                        >\r\n                            <MenuItem onClick={() => handleMenuClick(\"/\")}>\r\n                                Home\r\n                            </MenuItem>\r\n                            <MenuItem onClick={() => handleMenuClick(\"/bots\")}>\r\n                                Bot Status\r\n                            </MenuItem>\r\n                            <MenuItem\r\n                                onClick={() =>\r\n                                    handleMenuClick(\"/contractcreation\")\r\n                                }\r\n                            >\r\n                                Contract Creation\r\n                            </MenuItem>\r\n                            <MenuItem\r\n                                onClick={() => handleMenuClick(\"/logout\")}\r\n                            >\r\n                                Logout\r\n                            </MenuItem>\r\n                        </Menu>\r\n                    </div>\r\n                </Toolbar>\r\n            </AppBar>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default withRouter(Navbar);\r\n","import { TableRow, TableCell, Button } from \"@material-ui/core\";\r\nimport React from \"react\";\r\n\r\nconst BotStatus = ({ status }) => {\r\n    return (\r\n        <TableRow key={status.name}>\r\n            <TableCell component=\"th\" scope=\"row\">\r\n                {status.name}\r\n            </TableCell>\r\n            <TableCell align=\"right\">{status.status}</TableCell>\r\n            <TableCell align=\"right\">{status.function}</TableCell>\r\n            <TableCell align=\"right\">{status.lastUpdateTime}</TableCell>\r\n            <TableCell>\r\n                <Button\r\n                    href={`/bots/${status.name}/queue`}\r\n                    variant=\"outlined\"\r\n                    color=\"primary\"\r\n                    align=\"right\"\r\n                >\r\n                    Queue\r\n                </Button>\r\n            </TableCell>\r\n            <TableCell>\r\n                <Button\r\n                    href={`/bots/${status.name}/history`}\r\n                    variant=\"outlined\"\r\n                    color=\"primary\"\r\n                    align=\"right\"\r\n                >\r\n                    History\r\n                </Button>\r\n            </TableCell>\r\n        </TableRow>\r\n    );\r\n};\r\n\r\nexport default BotStatus;\r\n","import {\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableRow,\r\n    TableHead,\r\n    Paper,\r\n} from \"@material-ui/core\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { React } from \"react\";\r\nimport BotStatus from \"./BotStatus\";\r\n\r\nconst BotStatuses = () => {\r\n    const [statuses, setStatuses] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const getStatuses = async () => {\r\n            const statuses = await fetchStatuses();\r\n            setStatuses(statuses);\r\n        };\r\n\r\n        getStatuses();\r\n\r\n        setInterval(() => {\r\n            getStatuses();\r\n        }, 10000);\r\n    }, []);\r\n\r\n    const fetchStatuses = async () => {\r\n        const res = await fetch(\"http://148.77.75.60:6050/api/bots/\");\r\n        const data = await res.json();\r\n        return data;\r\n    };\r\n\r\n    return (\r\n        <TableContainer component={Paper}>\r\n            <Table aria-label=\"simple table\">\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell>Name</TableCell>\r\n                        <TableCell align=\"right\">Status</TableCell>\r\n                        <TableCell align=\"right\">Function</TableCell>\r\n                        <TableCell align=\"right\">Last Update</TableCell>\r\n                        <TableCell align=\"right\">Queue</TableCell>\r\n                        <TableCell align=\"right\">History</TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {statuses.map((status) => (\r\n                        <BotStatus key={status.name} status={status} />\r\n                    ))}\r\n                </TableBody>\r\n            </Table>\r\n        </TableContainer>\r\n    );\r\n};\r\n\r\nexport default BotStatuses;\r\n","import React from \"react\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\n\r\nconst GenesisRoof = ({ roof }) => {\r\n    return (\r\n        <Paper className=\"genesis_roof\">\r\n            <div>\r\n                <b>Tilt: </b>\r\n                {roof.tilt}°\r\n            </div>\r\n            <div>\r\n                <b>Azimuth: </b>\r\n                {roof.azimuth}°\r\n            </div>\r\n            <div>\r\n                <b>Availability: </b>\r\n                {roof.availability}%\r\n            </div>\r\n            <div>\r\n                <b>Quantity: </b>\r\n                {roof.moduleQuantity}\r\n            </div>\r\n        </Paper>\r\n    );\r\n};\r\n\r\nexport default GenesisRoof;\r\n","import React from \"react\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Link from \"@material-ui/core/Link\";\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport GenesisRoof from \"./GenesisRoof\";\r\nimport { Icon } from \"@iconify/react\";\r\nimport solarPanel from \"@iconify-icons/fa-solid/solar-panel\";\r\nimport { Divider, Typography } from \"@material-ui/core\";\r\n\r\nconst GenesisDesignCard = ({ design }) => {\r\n    return (\r\n        <Card variant=\"outlined\">\r\n            <Grid container justify=\"space-around\" alignItems=\"center\">\r\n                <Grid item xs={12} lg={6} p={2}>\r\n                    <Typography variant=\"h6\">\r\n                        <Link\r\n                            variant=\"inherit\"\r\n                            href={`https://trinity-solar.lightning.force.com/lightning/r/Opportunity/${design.opportunityId}/view`}\r\n                            target=\"_blank\"\r\n                        >\r\n                            {design.opportunity &&\r\n                                design.opportunity.opportunityName}\r\n                        </Link>\r\n                    </Typography>\r\n                </Grid>\r\n                <Grid item component=\"a\">\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        href={\"/contractcreation/genesisdesigns/\" + design.id}\r\n                        align=\"right\"\r\n                    >\r\n                        <b>Create Contract</b>\r\n                    </Button>\r\n                </Grid>\r\n            </Grid>\r\n            <Divider />\r\n            <CardContent>\r\n                <Grid container spacing={2} justify=\"space-evenly\" m={2}>\r\n                    <Grid item>\r\n                        <Chip\r\n                            variant=\"outlined\"\r\n                            label={\r\n                                design.moduleType\r\n                                    ? design.moduleType\r\n                                    : \"Module Not Set\"\r\n                            }\r\n                            icon={<Icon icon={solarPanel} />}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Chip\r\n                            variant=\"outlined\"\r\n                            label={\r\n                                \"Total: \" +\r\n                                design.roofs\r\n                                    .map((roof) => roof.moduleQuantity)\r\n                                    .reduce((a, b) => a + b, 0)\r\n                            }\r\n                            icon={<Icon icon={solarPanel} />}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid\r\n                    container\r\n                    spacing={2}\r\n                    justify=\"space-evenly\"\r\n                    alignItems=\"center\"\r\n                >\r\n                    {design.roofs.map((roof) => (\r\n                        <Grid item>\r\n                            <GenesisRoof key={roof.id} roof={roof} />\r\n                        </Grid>\r\n                    ))}\r\n                </Grid>\r\n            </CardContent>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default GenesisDesignCard;\r\n","import { Typography } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport GenesisDesignCard from \"./GenesisDesignCard\";\r\n\r\nconst GenesisDesigns = ({ designs }) => {\r\n    return (\r\n        <Typography component={\"span\"}>\r\n            <Typography variant=\"h4\">Genesis Designs</Typography>\r\n            <Grid container spacing={2}>\r\n                {[...designs].reverse().map((design) => {\r\n                    if (design.opportunity && design.moduleType) {\r\n                        return (\r\n                            <Grid key={design.id} item xs={12} lg={6}>\r\n                                <GenesisDesignCard\r\n                                    key={design.id}\r\n                                    design={design}\r\n                                />\r\n                            </Grid>\r\n                        );\r\n                    }\r\n                    return null;\r\n                })}\r\n            </Grid>\r\n        </Typography>\r\n    );\r\n};\r\n\r\nexport default GenesisDesigns;\r\n","import React from \"react\";\r\nimport {\r\n    Card,\r\n    CardContent,\r\n    Grid,\r\n    Chip,\r\n    Button,\r\n    Divider,\r\n} from \"@material-ui/core\";\r\nimport { Icon } from \"@iconify/react\";\r\nimport solarPanel from \"@iconify-icons/fa-solid/solar-panel\";\r\nimport powerIcon from \"@iconify-icons/icomoon-free/power\";\r\nimport GenesisRoof from \"./GenesisRoof\";\r\n\r\nconst GenesisDesign = ({ design, usage }) => {\r\n    return (\r\n        <Card variant=\"outlined\" style={{ height: \"100%\" }}>\r\n            <Grid container justify=\"space-around\" alignItems=\"center\" p={2}>\r\n                <Grid item xs={12} sm={6}>\r\n                    <h3>\r\n                        <Button\r\n                            variant=\"outlined\"\r\n                            color=\"primary\"\r\n                            href={`https://trinity-solar.lightning.force.com/lightning/r/Opportunity/${design.opportunityId}/view`}\r\n                        >\r\n                            {design.opportunity?.opportunityName\r\n                                ? design.opportunity.opportunityName\r\n                                : design.opportunity?.salesforceId}\r\n                        </Button>\r\n                    </h3>\r\n                </Grid>\r\n                <Grid item xs={12} sm={6}>\r\n                    {design.createDesignTask && (\r\n                        <Chip\r\n                            label={\r\n                                design.createDesignTask.completed\r\n                                    ? design.createDesignTask.sunnovaName\r\n                                    : \"Not Created\"\r\n                            }\r\n                            color={\r\n                                design.createDesignTask.completed\r\n                                    ? \"primary\"\r\n                                    : \"secondary\"\r\n                            }\r\n                            size=\"small\"\r\n                        />\r\n                    )}\r\n                </Grid>\r\n            </Grid>\r\n            <Divider />\r\n            <CardContent>\r\n                <Grid container spacing={2} justify=\"space-evenly\" m={2}>\r\n                    <Grid item>\r\n                        <Chip\r\n                            variant=\"outlined\"\r\n                            label={\r\n                                design.moduleType\r\n                                    ? design.moduleType\r\n                                    : \"Module Not Set\"\r\n                            }\r\n                            icon={<Icon icon={solarPanel} />}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Chip\r\n                            variant=\"outlined\"\r\n                            label={\r\n                                \"Total: \" +\r\n                                design.roofs\r\n                                    .map((roof) => roof.moduleQuantity)\r\n                                    .reduce((a, b) => a + b, 0)\r\n                            }\r\n                            icon={<Icon icon={solarPanel} />}\r\n                        />\r\n                    </Grid>\r\n                    {usage && (\r\n                        <Grid item>\r\n                            <Chip\r\n                                variant=\"outlined\"\r\n                                label={`Usage: ${usage}kWh`}\r\n                                icon={<Icon icon={powerIcon} />}\r\n                            />\r\n                        </Grid>\r\n                    )}\r\n                </Grid>\r\n                <Grid\r\n                    container\r\n                    spacing={2}\r\n                    justify=\"space-evenly\"\r\n                    alignItems=\"center\"\r\n                >\r\n                    {design.roofs.map((roof) => (\r\n                        <Grid item>\r\n                            <GenesisRoof key={roof.id} roof={roof} />\r\n                        </Grid>\r\n                    ))}\r\n                </Grid>\r\n            </CardContent>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default GenesisDesign;\r\n","import React from \"react\";\r\nimport { List, ListItemText } from \"@material-ui/core\";\r\n\r\nconst FinalizedQuote = ({ finalizedQuote }) => {\r\n    return (\r\n        <List>\r\n            <ListItemText\r\n                primary=\"Finalized In Sunnova\"\r\n                secondary={finalizedQuote.sunnovaFinalized ? \"Yes\" : \"No\"}\r\n            />\r\n            <ListItemText\r\n                primary=\"Contract Downloaded\"\r\n                secondary={finalizedQuote.contractDownloaded ? \"Yes\" : \"No\"}\r\n            />\r\n            <ListItemText\r\n                primary=\"Salesforce Updated\"\r\n                secondary={finalizedQuote.salesforceUpdated ? \"Yes\" : \"No\"}\r\n            />\r\n            <ListItemText\r\n                primary=\"Combined Packet Downloaded\"\r\n                secondary={\r\n                    finalizedQuote.combinedPacketDownloaded ? \"Yes\" : \"No\"\r\n                }\r\n            />\r\n            <ListItemText\r\n                primary=\"Contract/Combined Uploaded\"\r\n                secondary={finalizedQuote.contractUploaded ? \"Yes\" : \"No\"}\r\n            />\r\n            <ListItemText\r\n                primary=\"Email Sent\"\r\n                secondary={finalizedQuote.emailSent ? \"Yes\" : \"No\"}\r\n            />\r\n            <ListItemText\r\n                primary=\"Direct Layout Uploaded\"\r\n                secondary={finalizedQuote.genesisUploaded ? \"Yes\" : \"No\"}\r\n            />\r\n        </List>\r\n    );\r\n};\r\n\r\nexport default FinalizedQuote;\r\n","import React, { useState } from \"react\";\r\nimport {\r\n    TextField,\r\n    Button,\r\n    Typography,\r\n    Grid,\r\n    FormGroup,\r\n    Checkbox,\r\n    FormLabel,\r\n    FormControlLabel,\r\n    InputLabel,\r\n    Select,\r\n    MenuItem,\r\n} from \"@material-ui/core\";\r\n\r\nconst rateChangeReasons = [\r\n    {\r\n        value: \"Competition w/o Proposal\",\r\n    },\r\n    {\r\n        value: \"Competition w/ Proposal\",\r\n    },\r\n    {\r\n        value: \"Customer Request\",\r\n    },\r\n    {\r\n        value: \"Customer Wants Rate Match\",\r\n    },\r\n    {\r\n        value: \"Low Income\",\r\n    },\r\n    {\r\n        value: \"Match Rate - Original Systems\",\r\n    },\r\n    {\r\n        value: \"Match Rate - Referrer\",\r\n    },\r\n    {\r\n        value: \"Meet Min PPW\",\r\n    },\r\n    {\r\n        value: \"Meet Starting Rate\",\r\n    },\r\n    {\r\n        value: \"No Positive Year 1 Savings\",\r\n    },\r\n    {\r\n        value: \"PPW Cap\",\r\n    },\r\n    {\r\n        value: \"Rate Cap\",\r\n    },\r\n    {\r\n        value: \"None\",\r\n    },\r\n];\r\n\r\nconst FinalizeQuote = ({ onFinalize, full, userEmail }) => {\r\n    const [installationType, setInstallationType] = useState({\r\n        asphalt: false,\r\n        metal: false,\r\n        flat: false,\r\n        ground: false,\r\n        parking: false,\r\n        battery: false,\r\n        clay: false,\r\n        concrete: false,\r\n    });\r\n\r\n    const installationTypeParameters = {\r\n        asphalt: \"Pitched Roof – Asphalt\",\r\n        metal: \"Pitched Roof – Metal\",\r\n        flat: \"Flat Roof (Less Than 5°)\",\r\n        ground: \"Ground-mount\",\r\n        parking: \"Parking Canopy\",\r\n        battery: \"Battery\",\r\n        clay: \"Clay Tile\",\r\n        concrete: \"Concrete Tile\",\r\n    };\r\n    const handleInstallationCheck = (event) => {\r\n        setInstallationType({\r\n            ...installationType,\r\n            [event.target.name]: event.target.checked,\r\n        });\r\n    };\r\n\r\n    const {\r\n        asphalt,\r\n        metal,\r\n        flat,\r\n        ground,\r\n        parking,\r\n        battery,\r\n        clay,\r\n        concrete,\r\n    } = installationType;\r\n\r\n    const [sunnovaUrl, setSunnovaUrl] = useState(\"\");\r\n    const [opportunityId, setOpportunityId] = useState(\"\");\r\n    const [salesforceNotes, setSalesforceNotes] = useState(\"\");\r\n    const [emailNotes, setEmailNotes] = useState(\"\");\r\n    const [rateChangeReason, setRateChangeReason] = useState(\"\");\r\n    const [permitPayer, setPermitPayer] = useState(\"\");\r\n    const [createSalesforceContract, setCreateSalesforceContract] = useState(\r\n        false\r\n    );\r\n\r\n    const handleFinalize = () => {\r\n        const installationData = Object.entries(installationType)\r\n            .filter((type) => {\r\n                return type[1];\r\n            })\r\n            .map((data) => {\r\n                const label = data[0];\r\n                return installationTypeParameters[label];\r\n            });\r\n\r\n        const data = {\r\n            installation_type: installationData,\r\n            sunnova_url: sunnovaUrl,\r\n            opportunity_id: opportunityId,\r\n            quote_notes: salesforceNotes,\r\n            salesperson_notes: emailNotes,\r\n            permit_payer: permitPayer,\r\n            loi_rate_change_reason:\r\n                rateChangeReason === \"None\" ? \"\" : rateChangeReason, // None is not a valid input for Salesforce\r\n            user_email: userEmail,\r\n            create_salesforce_object: createSalesforceContract,\r\n        };\r\n        onFinalize(data);\r\n    };\r\n\r\n    return (\r\n        <Typography component={\"span\"}>\r\n            <Grid container spacing={2}>\r\n                {full && (\r\n                    <>\r\n                        <Grid item xs={6}>\r\n                            <TextField\r\n                                id=\"finalize-sunnova-url\"\r\n                                variant=\"outlined\"\r\n                                label=\"Sunnova URL\"\r\n                                value={sunnovaUrl}\r\n                                onChange={(e) => setSunnovaUrl(e.target.value)}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={6}>\r\n                            <TextField\r\n                                id=\"finalize-opportunity-id\"\r\n                                variant=\"outlined\"\r\n                                label=\"Opportunity ID\"\r\n                                value={opportunityId}\r\n                                onChange={(e) =>\r\n                                    setOpportunityId(e.target.value)\r\n                                }\r\n                            />\r\n                        </Grid>\r\n                    </>\r\n                )}\r\n                <Grid item xs={full ? 6 : 12}>\r\n                    <TextField\r\n                        id=\"finalize-salesforce-notes\"\r\n                        variant=\"outlined\"\r\n                        label=\"Salesforce Notes\"\r\n                        multiline\r\n                        value={salesforceNotes}\r\n                        onChange={(e) => setSalesforceNotes(e.target.value)}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={full ? 6 : 12}>\r\n                    <TextField\r\n                        id=\"finalize-email-notes\"\r\n                        variant=\"outlined\"\r\n                        label=\"Email Notes\"\r\n                        multiline\r\n                        value={emailNotes}\r\n                        onChange={(e) => setEmailNotes(e.target.value)}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={full ? 6 : 12}>\r\n                    <InputLabel id=\"finalize-rate-change-reason\">\r\n                        LOI Rate Change Reason\r\n                    </InputLabel>\r\n                    <Select\r\n                        labelId=\"finalize-rate-change-reason\"\r\n                        value={rateChangeReason}\r\n                        onChange={(e) => setRateChangeReason(e.target.value)}\r\n                    >\r\n                        {rateChangeReasons.map((option) => (\r\n                            <MenuItem key={option.value} value={option.value}>\r\n                                {option.value}\r\n                            </MenuItem>\r\n                        ))}\r\n                    </Select>\r\n                </Grid>\r\n\r\n                <Grid item xs={full ? 6 : 12}>\r\n                    <InputLabel id=\"finalize-permit-payer\">\r\n                        Permit Payer\r\n                    </InputLabel>\r\n                    <Select\r\n                        labelId=\"finalize-permit-payer\"\r\n                        value={permitPayer}\r\n                        onChange={(e) => setPermitPayer(e.target.value)}\r\n                    >\r\n                        <MenuItem value=\"Trinity\">Trinity</MenuItem>\r\n                        <MenuItem value=\"Customer\">Customer</MenuItem>\r\n                        <MenuItem value=\"Other\">Other</MenuItem>\r\n                    </Select>\r\n                </Grid>\r\n                <Grid item xs={full ? 6 : 12}>\r\n                    <FormGroup>\r\n                        <FormLabel>Installation Type</FormLabel>\r\n                        <FormControlLabel\r\n                            control={\r\n                                <Checkbox\r\n                                    checked={asphalt}\r\n                                    onClick={handleInstallationCheck}\r\n                                    name=\"asphalt\"\r\n                                    color=\"primary\"\r\n                                />\r\n                            }\r\n                            label=\"Pitched Roof – Asphalt\"\r\n                        />\r\n                        <FormControlLabel\r\n                            control={\r\n                                <Checkbox\r\n                                    checked={metal}\r\n                                    onClick={handleInstallationCheck}\r\n                                    name=\"metal\"\r\n                                    color=\"primary\"\r\n                                />\r\n                            }\r\n                            label=\"Pitched Roof – Metal\"\r\n                        />\r\n                        <FormControlLabel\r\n                            control={\r\n                                <Checkbox\r\n                                    checked={flat}\r\n                                    onClick={handleInstallationCheck}\r\n                                    name=\"flat\"\r\n                                    color=\"primary\"\r\n                                />\r\n                            }\r\n                            label=\"Flat Roof (Less Than 5°)\"\r\n                        />\r\n                        <FormControlLabel\r\n                            control={\r\n                                <Checkbox\r\n                                    checked={ground}\r\n                                    onClick={handleInstallationCheck}\r\n                                    name=\"ground\"\r\n                                    color=\"primary\"\r\n                                />\r\n                            }\r\n                            label=\"Ground-mount\"\r\n                        />\r\n                        <FormControlLabel\r\n                            control={\r\n                                <Checkbox\r\n                                    checked={parking}\r\n                                    onClick={handleInstallationCheck}\r\n                                    name=\"parking\"\r\n                                    color=\"primary\"\r\n                                />\r\n                            }\r\n                            label=\"Parking Canopy\"\r\n                        />\r\n                        <FormControlLabel\r\n                            control={\r\n                                <Checkbox\r\n                                    checked={battery}\r\n                                    onClick={handleInstallationCheck}\r\n                                    name=\"battery\"\r\n                                    color=\"primary\"\r\n                                />\r\n                            }\r\n                            label=\"Battery\"\r\n                        />\r\n                        <FormControlLabel\r\n                            control={\r\n                                <Checkbox\r\n                                    checked={clay}\r\n                                    onClick={handleInstallationCheck}\r\n                                    name=\"clay\"\r\n                                    color=\"primary\"\r\n                                />\r\n                            }\r\n                            label=\"Clay Tile\"\r\n                        />\r\n                        <FormControlLabel\r\n                            control={\r\n                                <Checkbox\r\n                                    checked={concrete}\r\n                                    onClick={handleInstallationCheck}\r\n                                    name=\"concrete\"\r\n                                    color=\"primary\"\r\n                                />\r\n                            }\r\n                            label=\"Concrete Tile\"\r\n                        />\r\n                    </FormGroup>\r\n                </Grid>\r\n\r\n                <Grid item xs={full ? 6 : 12}>\r\n                    <FormControlLabel\r\n                        control={\r\n                            <Checkbox\r\n                                checked={createSalesforceContract}\r\n                                onClick={(e) => {\r\n                                    setCreateSalesforceContract(\r\n                                        e.target.checked\r\n                                    );\r\n                                }}\r\n                                name=\"create-salesforce-contract\"\r\n                                color=\"primary\"\r\n                            />\r\n                        }\r\n                        label=\"Create Salesforce Contract\"\r\n                    />\r\n                </Grid>\r\n\r\n                <Grid item xs={full ? 6 : 12}>\r\n                    <Button\r\n                        variant=\"outlined\"\r\n                        color=\"primary\"\r\n                        onClick={handleFinalize}\r\n                    >\r\n                        Finalize\r\n                    </Button>\r\n                </Grid>\r\n            </Grid>\r\n        </Typography>\r\n    );\r\n};\r\n\r\nexport default FinalizeQuote;\r\n","import { Card, CardContent, Grid, List, ListItemText } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/styles\";\r\nimport FinalizedQuote from \"./FinalizedQuote\";\r\nimport React, { useState } from \"react\";\r\nimport FinalizeQuote from \"./FinalizeQuote\";\r\n\r\nconst useStyles = makeStyles({\r\n    secondary: {\r\n        color: \"primary\",\r\n    },\r\n    card: {\r\n        lineHeight: \"1rem\",\r\n    },\r\n});\r\n\r\nconst Quote = ({ quote, onFinalize }) => {\r\n    const getPriceString = () => {\r\n        if (quote.financingType === \"Sunnova Loan\") {\r\n            return quote.price / 100;\r\n        }\r\n        return quote.price / 1000;\r\n    };\r\n\r\n    const onFinalizeQuote = (data) => {\r\n        const dataWithQuote = { ...data, quote_id: quote.id };\r\n        onFinalize(dataWithQuote);\r\n    };\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Grid item xs={6}>\r\n            <Card variant=\"outlined\" style={{ height: \"100%\" }}>\r\n                <Grid container alignItems=\"center\">\r\n                    <Grid item xs={6}>\r\n                        <CardContent className={classes.card}>\r\n                            <List>\r\n                                {quote.status && (\r\n                                    <ListItemText\r\n                                        className={classes.secondary}\r\n                                        primary=\"Status\"\r\n                                        secondary={quote.status}\r\n                                    />\r\n                                )}\r\n\r\n                                {quote.valid && (\r\n                                    <ListItemText\r\n                                        primary=\"Valid\"\r\n                                        secondary={quote.valid ? \"Yes\" : \"No\"}\r\n                                    />\r\n                                )}\r\n                                {quote.financingType && (\r\n                                    <ListItemText\r\n                                        primary=\"Financing Type\"\r\n                                        secondary={quote.financingType}\r\n                                    />\r\n                                )}\r\n                                {quote.purchaseMethod && (\r\n                                    <ListItemText\r\n                                        primary=\"Purchase Method\"\r\n                                        secondary={quote.purchaseMethod}\r\n                                    />\r\n                                )}\r\n                                {quote.price && (\r\n                                    <ListItemText\r\n                                        primary=\"User Submitted Price\"\r\n                                        secondary={getPriceString() + \"$\"}\r\n                                    />\r\n                                )}\r\n                                {quote.systemSize && (\r\n                                    <ListItemText\r\n                                        primary=\"System Size\"\r\n                                        secondary={quote.systemSize + \"kW\"}\r\n                                    />\r\n                                )}\r\n                                {quote.solarRate && (\r\n                                    <ListItemText\r\n                                        primary=\"Solar Rate\"\r\n                                        secondary={\"$\" + quote.solarRate}\r\n                                    />\r\n                                )}\r\n                                {quote.monthlySunnovaPayment && (\r\n                                    <ListItemText\r\n                                        primary=\"Monthly Payment\"\r\n                                        secondary={\r\n                                            \"$\" + quote.monthlySunnovaPayment\r\n                                        }\r\n                                    />\r\n                                )}\r\n                                {quote.estimatedProduction && (\r\n                                    <ListItemText\r\n                                        primary=\"Estimated Production\"\r\n                                        secondary={\r\n                                            quote.estimatedProduction + \"kWh\"\r\n                                        }\r\n                                    />\r\n                                )}\r\n                                {quote.newUtilityBill && (\r\n                                    <ListItemText\r\n                                        primary=\"New Utility Bill\"\r\n                                        secondary={\"$\" + quote.newUtilityBill}\r\n                                    />\r\n                                )}\r\n                                {quote.totalMonthlyElectrityCost && (\r\n                                    <ListItemText\r\n                                        primary=\"Total Monthly Electric Cost\"\r\n                                        secondary={\r\n                                            \"$\" +\r\n                                            quote.totalMonthlyElectrityCost\r\n                                        }\r\n                                    />\r\n                                )}\r\n                                {quote.utilityRate && (\r\n                                    <ListItemText\r\n                                        primary=\"Utility Rate\"\r\n                                        secondary={\"$\" + quote.utilityRate}\r\n                                    />\r\n                                )}\r\n                                {quote.yearOneSavings && (\r\n                                    <ListItemText\r\n                                        primary=\"Year One Savings\"\r\n                                        secondary={\"$\" + quote.yearOneSavings}\r\n                                    />\r\n                                )}\r\n                                {quote.savingsOverTermLength && (\r\n                                    <ListItemText\r\n                                        primary=\"Savings Over Term Length\"\r\n                                        secondary={\r\n                                            \"$\" + quote.savingsOverTermLength\r\n                                        }\r\n                                    />\r\n                                )}\r\n                                {quote.lifetimePayment && (\r\n                                    <ListItemText\r\n                                        primary=\"Lifetime Payment\"\r\n                                        secondary={\"$\" + quote.lifetimePayment}\r\n                                    />\r\n                                )}\r\n                                {quote.pricePerWatt && (\r\n                                    <ListItemText\r\n                                        primary=\"Price Per Watt\"\r\n                                        secondary={\"$\" + quote.pricePerWatt}\r\n                                    />\r\n                                )}\r\n                                {quote.totalEpc && (\r\n                                    <ListItemText\r\n                                        primary=\"Total EPC\"\r\n                                        secondary={\"$\" + quote.totalEpc}\r\n                                    />\r\n                                )}\r\n                                {quote.contractId && (\r\n                                    <ListItemText\r\n                                        primary=\"Contract ID\"\r\n                                        secondary={quote.contractId}\r\n                                    />\r\n                                )}\r\n                            </List>\r\n                        </CardContent>\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                        <CardContent>\r\n                            {quote.finalized ? (\r\n                                <FinalizedQuote\r\n                                    finalizedQuote={\r\n                                        quote.finalizeSunnovaQuoteTask\r\n                                    }\r\n                                />\r\n                            ) : (\r\n                                <form>\r\n                                    <FinalizeQuote\r\n                                        onFinalize={onFinalizeQuote}\r\n                                    />\r\n                                </form>\r\n                            )}\r\n                        </CardContent>\r\n                    </Grid>\r\n                </Grid>\r\n            </Card>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default Quote;\r\n","import React, { useState } from \"react\";\r\nimport {\r\n    Card,\r\n    MenuItem,\r\n    Grid,\r\n    Typography,\r\n    Button,\r\n    TextField,\r\n    InputLabel,\r\n    Select,\r\n    CardContent,\r\n} from \"@material-ui/core\";\r\n\r\nconst CreateQuote = ({ onCreateQuote, designId }) => {\r\n    const [salesforcePurchaseMethod, setSalesforcePurchaseMethod] = useState(\r\n        \"\"\r\n    );\r\n    const [sunnovaPurchaseMethod, setSunnovaPurchaseMethod] = useState(\"\");\r\n    const [price, setPrice] = useState(\"\");\r\n    const [escalator, setEscalator] = useState(\"\");\r\n\r\n    const handleCreateQuote = () => {\r\n        const data = {\r\n            design_id: designId,\r\n            salesforce_purchase_method: salesforcePurchaseMethod,\r\n            sunnova_purchase_method: sunnovaPurchaseMethod,\r\n            price: price.replace(\".\", \"\"),\r\n            salesforce_escalator: escalator,\r\n        };\r\n\r\n        onCreateQuote(data);\r\n    };\r\n\r\n    return (\r\n        <Card variant=\"outlined\">\r\n            <CardContent>\r\n                <form>\r\n                    <Grid container spacing={2}>\r\n                        <Grid item xs={4}>\r\n                            <InputLabel id=\"create-quote-salesforce-method\">\r\n                                Salesforce Purchase Method\r\n                            </InputLabel>\r\n                            <Select\r\n                                labelId=\"create-quote-salesforce-method\"\r\n                                onChange={(e) =>\r\n                                    setSalesforcePurchaseMethod(e.target.value)\r\n                                }\r\n                            >\r\n                                <MenuItem>Default</MenuItem>\r\n                                <MenuItem value=\"Sunnova EZ Pay PPA\">\r\n                                    Sunnova EZ Pay PPA\r\n                                </MenuItem>\r\n                                <MenuItem value=\"Sunnova Lease\">\r\n                                    Sunnova Lease\r\n                                </MenuItem>\r\n                                <MenuItem value=\"Sunnova Loan\">\r\n                                    Sunnova Loan\r\n                                </MenuItem>\r\n                                <MenuItem value=\"Sunnova True PPA\">\r\n                                    Sunnova True PPA\r\n                                </MenuItem>\r\n                            </Select>\r\n                        </Grid>\r\n                        <Grid item xs={4}>\r\n                            <InputLabel id=\"create-quote-sunnova-method\">\r\n                                Sunnova Purchase Method\r\n                            </InputLabel>\r\n                            <Select\r\n                                labelId=\"create-quote-sunnova-method\"\r\n                                onChange={(e) =>\r\n                                    setSunnovaPurchaseMethod(e.target.value)\r\n                                }\r\n                            >\r\n                                <MenuItem>Default</MenuItem>\r\n                                <MenuItem value=\"EPC to Dealer\">\r\n                                    EPC to Dealer\r\n                                </MenuItem>\r\n                                <MenuItem value=\"Dealer EPC Per Watt\">\r\n                                    Dealer EPC Per Watt\r\n                                </MenuItem>\r\n                                <MenuItem value=\"Solar Rate\">\r\n                                    Solar Rate\r\n                                </MenuItem>\r\n                                <MenuItem value=\"Monthly Payment\">\r\n                                    Monthly Payment\r\n                                </MenuItem>\r\n                                <MenuItem value=\"Customer Price\">\r\n                                    Customer Price\r\n                                </MenuItem>\r\n                            </Select>\r\n                        </Grid>\r\n                        <Grid item xs={4}>\r\n                            <InputLabel id=\"create-quote-escalator\">\r\n                                Escalator\r\n                            </InputLabel>\r\n                            <Select\r\n                                labelId=\"create-quote-escalator\"\r\n                                onChange={(e) => setEscalator(e.target.value)}\r\n                            >\r\n                                <MenuItem>Default</MenuItem>\r\n                                <MenuItem value=\"0.0%\">0.0%</MenuItem>\r\n                                <MenuItem value=\"0.9%\">0.9%</MenuItem>\r\n                                <MenuItem value=\"1.9%\">1.9%</MenuItem>\r\n                                <MenuItem value=\"2.9%\">2.9%</MenuItem>\r\n                            </Select>\r\n                        </Grid>\r\n                        <Grid item xs={6}>\r\n                            <TextField\r\n                                id=\"create-quote-price\"\r\n                                label=\"Price\"\r\n                                variant=\"outlined\"\r\n                                value={price}\r\n                                onChange={(e) => setPrice(e.target.value)}\r\n                            />\r\n                        </Grid>\r\n                        <Button\r\n                            variant=\"outlined\"\r\n                            color=\"primary\"\r\n                            onClick={handleCreateQuote}\r\n                        >\r\n                            Submit\r\n                        </Button>\r\n                    </Grid>\r\n                </form>\r\n            </CardContent>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default CreateQuote;\r\n","const APIURL = \"http://148.77.75.60:6050/\";\r\n\r\nexport default APIURL;","import { Card, CardContent, Grid, Typography, Button } from \"@material-ui/core\";\r\nimport GenesisDesign from \"./GenesisDesign\";\r\nimport Quote from \"./Quote\";\r\nimport React, { useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport CreateQuote from \"./CreateQuote\";\r\nimport APIURL from \"../../../config\";\r\n\r\nconst CreateContract = ({ designs, setDesigns, setFormSubmitted }) => {\r\n    const [createQuoteOpen, setCreateQuoteOpen] = useState(false);\r\n    let { id } = useParams();\r\n\r\n    const design = designs.find((design) => {\r\n        return design.id.toString() === id;\r\n    });\r\n\r\n    const onCreateQuote = (data) => {\r\n        fetch(APIURL + \"api/contractcreation/quote/\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify(data),\r\n        })\r\n            .then((res) => res.json())\r\n            .then((data) => {\r\n                if (data.id) {\r\n                    const updatedDesigns = designs.map((design) => {\r\n                        if (design.id === data.id) {\r\n                            const updatedQuotes = [\r\n                                ...design.sunnovaQuotes,\r\n                                data,\r\n                            ];\r\n                            const updatedDesign = {\r\n                                ...design,\r\n                                sunnovaQuotes: updatedQuotes,\r\n                            };\r\n                            return updatedDesign;\r\n                        } else {\r\n                            return design;\r\n                        }\r\n                    });\r\n                    setDesigns(updatedDesigns);\r\n                }\r\n            });\r\n        setCreateQuoteOpen(false);\r\n    };\r\n\r\n    const onFinalize = (data) => {\r\n        fetch(APIURL + \"api/contractcreation/quote/finalize\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify(data),\r\n        })\r\n            .then((res) => res.json())\r\n            .then((json) => {\r\n                alert(\r\n                    \"Quote has been finalized. Please finalize design in Genesis.\"\r\n                );\r\n                setFormSubmitted(true);\r\n            });\r\n    };\r\n\r\n    return (\r\n        <Typography component={\"span\"}>\r\n            <h1>Create Contract</h1>\r\n            <Grid container spacing={1}>\r\n                <Grid item xs={12} md={6}>\r\n                    {design && (\r\n                        <GenesisDesign\r\n                            design={design}\r\n                            usage={design.opportunity?.usage}\r\n                        />\r\n                    )}\r\n                </Grid>\r\n                <Grid item xs={12} md={6}>\r\n                    <Card variant=\"outlined\" style={{ height: \"100%\" }}>\r\n                        <CardContent>Bot Info</CardContent>\r\n                        <CardContent>\r\n                            <p>Name: Bot Name</p>\r\n                            <p>Status: Bot Status</p>\r\n                        </CardContent>\r\n                    </Card>\r\n                </Grid>\r\n            </Grid>\r\n\r\n            <Grid container spacing={1}>\r\n                <Grid item xs={12}>\r\n                    <Button\r\n                        variant=\"outlined\"\r\n                        color=\"primary\"\r\n                        style={{ width: \"100%\" }}\r\n                        onClick={() => setCreateQuoteOpen(!createQuoteOpen)}\r\n                    >\r\n                        {createQuoteOpen ? \"Close\" : \"Create New Quote\"}\r\n                    </Button>\r\n                </Grid>\r\n                {createQuoteOpen && (\r\n                    <Grid item xs={12}>\r\n                        <CreateQuote\r\n                            designId={design.id}\r\n                            onCreateQuote={onCreateQuote}\r\n                        />\r\n                    </Grid>\r\n                )}\r\n                {design &&\r\n                    design.sunnovaQuotes.map((quote) => (\r\n                        <Quote\r\n                            key={quote.id}\r\n                            quote={quote}\r\n                            onFinalize={onFinalize}\r\n                        />\r\n                    ))}\r\n            </Grid>\r\n        </Typography>\r\n    );\r\n};\r\n\r\nexport default CreateContract;\r\n","import React from \"react\";\r\nimport { List, ListItem, Divider } from \"@material-ui/core\";\r\n\r\nconst ContractCreationNav = ({ history }) => {\r\n    return (\r\n        <>\r\n            <h2>Contract Creation</h2>\r\n            <List>\r\n                <Divider />\r\n                <ListItem\r\n                    button\r\n                    component=\"a\"\r\n                    href=\"/contractcreation/genesisdesigns\"\r\n                >\r\n                    Genesis Designs\r\n                </ListItem>\r\n                <Divider />\r\n                <ListItem\r\n                    button\r\n                    component=\"a\"\r\n                    href=\"/contractcreation/finalize\"\r\n                >\r\n                    Finalize Contract\r\n                </ListItem>\r\n                <Divider />\r\n                <ListItem\r\n                    button\r\n                    component=\"a\"\r\n                    href=\"/contractcreation/disqualify\"\r\n                >\r\n                    Disqualify Opportunity\r\n                </ListItem>\r\n                <Divider />\r\n            </List>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ContractCreationNav;\r\n","import React, { useState } from \"react\";\r\nimport { Typography } from \"@material-ui/core\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport FinalizeQuote from \"./genesisdesign/FinalizeQuote\";\r\nimport APIURL from \"../../config\";\r\n\r\nconst FinalizeContract = ({ userEmail }) => {\r\n    const [id, setId] = useState();\r\n    const finalizeContract = (data) => {\r\n        fetch(APIURL + \"api/contractcreation/finalize\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify(data),\r\n        })\r\n            .then((res) => res.json())\r\n            .then((data) => {\r\n                if (data.id) {\r\n                    setId(data.id);\r\n                    alert(\r\n                        \"Contract has been finalized. Please finalize design in Genesis.\"\r\n                    );\r\n                } else {\r\n                    alert(\r\n                        \"There was an error finalizing this quote, please try again.\"\r\n                    );\r\n                }\r\n            })\r\n            .catch((err) => {\r\n                console.log(err);\r\n                alert(\"There was an error finalizing this contract.\");\r\n            });\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Typography variant=\"h4\">Finalize Contract</Typography>\r\n            <FinalizeQuote\r\n                full\r\n                userEmail={userEmail}\r\n                finalizeContract={finalizeContract}\r\n                onFinalize={finalizeContract}\r\n            />\r\n            {id && <Redirect to={\"/contractcreation/finalize/\" + id} />}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default FinalizeContract;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport FinalizedQuote from \"./genesisdesign/FinalizedQuote\";\r\nimport APIURL from \"../../config\";\r\n\r\nconst FinalizedContract = () => {\r\n    let { id } = useParams();\r\n    const [finalizedQuote, setFinalizedQuote] = useState();\r\n\r\n    useEffect(() => {\r\n        const fetchFinalizedQuote = async () => {\r\n            const res = await fetch(\r\n                APIURL + \"api/contractcreation/finalize/\" + id\r\n            );\r\n            const data = await res.json();\r\n            return data;\r\n        };\r\n\r\n        const getFinalizedQuote = async () => {\r\n            const finalizeQuote = await fetchFinalizedQuote();\r\n            setFinalizedQuote(finalizeQuote);\r\n        };\r\n\r\n        getFinalizedQuote();\r\n        setInterval(() => {\r\n            getFinalizedQuote();\r\n        }, 10000);\r\n    }, [id]);\r\n\r\n    return (\r\n        <>\r\n            <h2>Finalized Contract</h2>\r\n            {!finalizedQuote && <div>Loading...</div>}\r\n            {finalizedQuote && (\r\n                <FinalizedQuote finalizedQuote={finalizedQuote} />\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default FinalizedContract;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport queryString from \"query-string\";\r\nimport APIURL from \"../../config\";\r\nimport {\r\n    TextField,\r\n    Button,\r\n    Typography,\r\n    Grid,\r\n    InputLabel,\r\n    Select,\r\n    MenuItem,\r\n} from \"@material-ui/core\";\r\n\r\nconst Disqualify = ({ userEmail }) => {\r\n    const [opportunityId, setOpportunityId] = useState(\"\");\r\n    const [notes, setNotes] = useState(\"\");\r\n    const [lostComments, setLostComments] = useState(\"\");\r\n    const [stageStatus, setStageStatus] = useState(\"\");\r\n    const [reasonLost, setReasonLost] = useState(\"\");\r\n\r\n    const lostReasons = [\r\n        \"Duplicate Lead\",\r\n        \"Financial - Credit Reject\",\r\n        \"LOI- No Contract due to Shade\",\r\n        \"LOI- Incomplete\",\r\n        \"Low Electric Usage\",\r\n        \"Low Income Discount\",\r\n        \"No Year 1 Savings\",\r\n        \"Rep Unresponsive\",\r\n        \"Structural Issues\",\r\n        \"Unable to Meet the Minimum System Size\",\r\n        \"Unable to Reach Minimum PPW\",\r\n    ];\r\n\r\n    const location = useLocation();\r\n    const parsed = queryString.parse(location.search);\r\n    useEffect(() => {\r\n        if (parsed.opportunityId) {\r\n            setOpportunityId(parsed.opportunityId);\r\n        }\r\n    }, [parsed.opportunityId]);\r\n\r\n    const onDisqualify = () => {\r\n        const data = {\r\n            opportunity_id: opportunityId,\r\n            email: userEmail,\r\n            notes: notes,\r\n        };\r\n        postDisqualify(data);\r\n    };\r\n\r\n    const postDisqualify = (data) => {\r\n        fetch(APIURL + \"api/contractcreation/disqualify\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify(data),\r\n        })\r\n            .then((res) => res.json())\r\n            .then((data) => {\r\n                if (data.id) {\r\n                    alert(\"Opportunity Disqualified\");\r\n                } else {\r\n                    alert(\"There was an issue. Please try again later.\");\r\n                }\r\n            })\r\n            .catch((err) => {\r\n                alert(\"There was an issue. Please try again later.\");\r\n                console.log(err);\r\n            });\r\n    };\r\n\r\n    return (\r\n        <Typography component={\"span\"}>\r\n            <h2>Disqualify Opportunity</h2>\r\n            <Grid container spacing={2}>\r\n                <Grid item xs={12}>\r\n                    <TextField\r\n                        id=\"disqualify-opportunity-id\"\r\n                        variant=\"outlined\"\r\n                        label=\"Opportunity ID\"\r\n                        value={opportunityId}\r\n                        onChange={(e) => setOpportunityId(e.target.value)}\r\n                        autoComplete=\"off\"\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <TextField\r\n                        id=\"disqualify-notes\"\r\n                        variant=\"outlined\"\r\n                        label=\"Email Notes\"\r\n                        value={notes}\r\n                        multiline\r\n                        onChange={(e) => setNotes(e.target.value)}\r\n                        autoComplete=\"off\"\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <TextField\r\n                        id=\"disqualify-lost-comments\"\r\n                        variant=\"outlined\"\r\n                        label=\"Lost Comments\"\r\n                        value={lostComments}\r\n                        multiline\r\n                        onChange={(e) => setLostComments(e.target.value)}\r\n                        autoComplete=\"off\"\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <InputLabel id=\"disqualify-stage-status\">\r\n                        Stage Status\r\n                    </InputLabel>\r\n                    <Select\r\n                        labelId=\"disqualify-stage-status\"\r\n                        value={stageStatus}\r\n                        onChange={(e) => setStageStatus(e.target.value)}\r\n                    >\r\n                        <MenuItem value=\"Worth Trying Again\">\r\n                            Worth Trying Again\r\n                        </MenuItem>\r\n                        <MenuItem value=\"Do Not Contact\">\r\n                            Do Not Contact\r\n                        </MenuItem>\r\n                    </Select>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <InputLabel id=\"disqualify-reason-lost\">\r\n                        Reason Lost\r\n                    </InputLabel>\r\n                    <Select\r\n                        labelId=\"disqualify-reason-lost\"\r\n                        value={reasonLost}\r\n                        onChange={(e) => setReasonLost(e.target.value)}\r\n                    >\r\n                        {lostReasons.map((reason) => (\r\n                            <MenuItem key={reason} value={reason}>\r\n                                {reason}\r\n                            </MenuItem>\r\n                        ))}\r\n                    </Select>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <Button\r\n                        variant=\"outlined\"\r\n                        color=\"primary\"\r\n                        onClick={onDisqualify}\r\n                    >\r\n                        Submit\r\n                    </Button>\r\n                </Grid>\r\n            </Grid>\r\n        </Typography>\r\n    );\r\n};\r\n\r\nexport default Disqualify;\r\n","import React from \"react\";\r\nimport { Route, useRouteMatch, Switch } from \"react-router-dom\";\r\nimport { useState, useEffect } from \"react\";\r\nimport GenesisDesigns from \"./genesisdesign/GenesisDesigns\";\r\nimport CreateContract from \"./genesisdesign/CreateContract\";\r\nimport ContractCreationNav from \"./ContractCreationNav\";\r\nimport FinalizeContract from \"./FinalizeContract\";\r\nimport FinalizedContract from \"./FinalizedContract\";\r\nimport Disqualify from \"./Disqualify\";\r\n\r\nconst ContractCreation = ({ userEmail }) => {\r\n    let { path } = useRouteMatch();\r\n    const [designs, setDesigns] = useState([]);\r\n    const [formSubmitted, setFormSubmitted] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const fetchDesigns = async () => {\r\n            const res = await fetch(\r\n                \"http://148.77.75.60:6050/salesforce/contract/sunnova?user_email=\" +\r\n                    userEmail\r\n            );\r\n            const data = await res.json();\r\n            return data;\r\n        };\r\n\r\n        const getDesigns = async () => {\r\n            const designs = await fetchDesigns();\r\n            setDesigns(designs);\r\n        };\r\n\r\n        getDesigns();\r\n        setInterval(() => {\r\n            getDesigns();\r\n        }, 10000);\r\n    }, [formSubmitted]);\r\n\r\n    return (\r\n        <>\r\n            <Switch>\r\n                <Route\r\n                    path={`${path}/genesisdesigns/:id`}\r\n                    component={CreateContract}\r\n                >\r\n                    <CreateContract\r\n                        setDesigns={setDesigns}\r\n                        designs={designs}\r\n                        setFormSubmitted={setFormSubmitted}\r\n                    />\r\n                </Route>\r\n                <Route\r\n                    path={`${path}/genesisdesigns`}\r\n                    children={<GenesisDesigns designs={designs} />}\r\n                />\r\n                <Route\r\n                    path={`${path}/finalize/:id`}\r\n                    component={FinalizedContract}\r\n                    children={<FinalizedContract userEmail={userEmail} />}\r\n                />\r\n                <Route\r\n                    path={`${path}/finalize`}\r\n                    children={<FinalizeContract userEmail={userEmail} />}\r\n                />\r\n                <Route\r\n                    path={`${path}/disqualify`}\r\n                    children={<Disqualify userEmail={userEmail} />}\r\n                />\r\n                <Route path={`${path}`} children={<ContractCreationNav />} />\r\n            </Switch>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ContractCreation;\r\n","import { useState } from \"react\";\r\nimport { Typography, TextField, Button, Grid } from \"@material-ui/core\";\r\n\r\nconst Login = ({ setToken, setUserEmail }) => {\r\n    const [email, setEmail] = useState();\r\n    const [password, setPassword] = useState();\r\n    const [loginError, setLoginError] = useState();\r\n\r\n    const loginUser = async (email, password) => {\r\n        return fetch(\"http://148.77.75.60:6050/api/login\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify({\r\n                email: email,\r\n                password: password,\r\n            }),\r\n        }).then((data) => data.json());\r\n    };\r\n\r\n    const handleLoginSubmit = async (event) => {\r\n        const token = await loginUser(email, password);\r\n        if (token.token) {\r\n            setToken(token.token);\r\n            setUserEmail(email);\r\n        } else {\r\n            setLoginError(true);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Typography>\r\n            <h2>Login</h2>\r\n            {loginError && <Typography>Incorrect Email or Password</Typography>}\r\n            <form>\r\n                <Grid container spacing={2}>\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            id=\"email\"\r\n                            variant=\"outlined\"\r\n                            label=\"Email\"\r\n                            onChange={(e) => setEmail(e.target.value)}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            type=\"password\"\r\n                            id=\"password\"\r\n                            variant=\"outlined\"\r\n                            label=\"Password\"\r\n                            onChange={(e) => setPassword(e.target.value)}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Button\r\n                            id=\"login\"\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            onClick={handleLoginSubmit}\r\n                        >\r\n                            Submit\r\n                        </Button>\r\n                    </Grid>\r\n                </Grid>\r\n            </form>\r\n        </Typography>\r\n    );\r\n};\r\n\r\nexport default Login;\r\n","import React, { useEffect } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nconst Logout = ({ setToken, setUserEmail }) => {\r\n    useEffect(() => {\r\n        console.log(\"component logout mount\");\r\n        setToken(null);\r\n        setUserEmail(null);\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <Redirect to=\"/\" />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Logout;\r\n","import React from \"react\";\r\nimport { useState } from \"react\";\r\nimport { Typography, TextField, Button, Grid } from \"@material-ui/core\";\r\nimport APIURL from \"../../config\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nconst ResetPassword = ({ userEmail, token }) => {\r\n    const [oldPassword, setOldPassword] = useState(\"\");\r\n    const [newPassword, setNewPassword] = useState(\"\");\r\n    const [newPasswordSecondary, setNewPasswordSecondary] = useState(\"\");\r\n    const [resetSuccess, setResetSuccess] = useState(false);\r\n\r\n    const submitChangePassword = () => {\r\n        if (newPassword !== newPasswordSecondary) {\r\n            alert(\"New Password does not match\");\r\n        } else {\r\n            const data = {\r\n                old_password: oldPassword,\r\n                new_password: newPassword,\r\n                email: userEmail,\r\n                token: token,\r\n            };\r\n            fetch(APIURL + \"api/changepassword\", {\r\n                method: \"POST\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                },\r\n                body: JSON.stringify(data),\r\n            })\r\n                .then((res) => res.json())\r\n                .then((data) => {\r\n                    if (data.token) {\r\n                        alert(\"Password Changed Successfully\");\r\n                        setResetSuccess(true);\r\n                    } else {\r\n                        alert(\"There was an error changing your password.\");\r\n                        console.log(data);\r\n                    }\r\n                });\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Typography>\r\n            {resetSuccess && <Redirect to=\"/\" />}\r\n            <h2>Change Password</h2>\r\n            <form>\r\n                <Grid container spacing={2}>\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            type=\"password\"\r\n                            id=\"old-password\"\r\n                            variant=\"outlined\"\r\n                            label=\"Old Password\"\r\n                            onChange={(e) => setOldPassword(e.target.value)}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            type=\"password\"\r\n                            id=\"new-password\"\r\n                            variant=\"outlined\"\r\n                            label=\"New Password\"\r\n                            onChange={(e) => setNewPassword(e.target.value)}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            type=\"password\"\r\n                            id=\"new-password-secondary\"\r\n                            variant=\"outlined\"\r\n                            label=\"Verify New Password\"\r\n                            onChange={(e) =>\r\n                                setNewPasswordSecondary(e.target.value)\r\n                            }\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Button\r\n                            id=\"login\"\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            onClick={submitChangePassword}\r\n                        >\r\n                            Submit\r\n                        </Button>\r\n                    </Grid>\r\n                </Grid>\r\n            </form>\r\n        </Typography>\r\n    );\r\n};\r\n\r\nexport default ResetPassword;\r\n","import React from \"react\";\r\nimport { TableRow, TableCell } from \"@material-ui/core\";\r\n\r\nconst BotTask = ({ task }) => {\r\n    return (\r\n        <TableRow key={task.name}>\r\n            <TableCell component=\"th\" scope=\"row\">\r\n                {task.name}\r\n            </TableCell>\r\n            <TableCell>{task.additionalInfo}</TableCell>\r\n            {task.completedTime && <TableCell>{task.completedTime}</TableCell>}\r\n        </TableRow>\r\n    );\r\n};\r\n\r\nexport default BotTask;\r\n","import React from \"react\";\r\nimport {\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableRow,\r\n    TableHead,\r\n    Paper,\r\n    Typography,\r\n} from \"@material-ui/core\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport BotTask from \"./BotTask\";\r\nimport APIURL from \"../../config\";\r\n\r\nconst BotTasks = () => {\r\n    let { name, taskType } = useParams();\r\n    const [tasks, setTasks] = useState([]);\r\n    const validTaskTypes = [\"queue\", \"history\"];\r\n\r\n    useEffect(() => {\r\n        const getTasks = async () => {\r\n            const tasks = await fetchTasks();\r\n            setTasks(tasks);\r\n        };\r\n\r\n        getTasks();\r\n\r\n        setInterval(() => {\r\n            getTasks();\r\n        }, 10000);\r\n    }, []);\r\n\r\n    const fetchTasks = async () => {\r\n        const res = await fetch(`${APIURL}api/bots/${name}/${taskType}`);\r\n        if (res.status === 404) {\r\n            return null;\r\n        }\r\n        const data = await res.json();\r\n        return data;\r\n    };\r\n    // Only queue and history are allowed endpoints for bots\r\n    if (!validTaskTypes.includes(taskType)) {\r\n        return <div>Not Found</div>;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Typography variant={\"h6\"}>\r\n                {name} {taskType}\r\n            </Typography>\r\n            <TableContainer component={Paper}>\r\n                <Table aria-label=\"simple table\">\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell>Name</TableCell>\r\n                            <TableCell>Additional Info</TableCell>\r\n                            {taskType === \"history\" ? (\r\n                                <TableCell>Completed Time</TableCell>\r\n                            ) : <TableCell>Added Time</TableCell>}\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {tasks &&\r\n                            [...tasks].reverse().map((task) => (\r\n                                <BotTask key={task.name} task={task} />\r\n                            ))}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default BotTasks;\r\n","import BotStatuses from \"./botstatus/BotStatuses\";\r\nimport { Switch, Route } from \"react-router-dom\";\r\nimport ContractCreation from \"./contractcreation/ContractCreation\";\r\nimport { Container, Typography } from \"@material-ui/core\";\r\nimport Login from \"./login/Login\";\r\nimport Logout from \"./login/Logout\";\r\nimport ResetPassword from \"./login/ResetPassword\";\r\nimport BotTasks from \"./botstatus/BotTasks\";\r\n\r\nconst MainContent = ({ token, setToken, userEmail, setUserEmail }) => {\r\n    return (\r\n        <Container id=\"main\">\r\n            {token && (\r\n                <Typography component={\"span\"}>\r\n                    <Switch>\r\n                        <Route\r\n                            path=\"/bots/:name/:taskType\"\r\n                            component={BotTasks}\r\n                        >\r\n                            <BotTasks />\r\n                        </Route>\r\n                        <Route path=\"/bots\">\r\n                            <BotStatuses />\r\n                        </Route>\r\n                        <Route path=\"/contractcreation\">\r\n                            <ContractCreation userEmail={userEmail} />\r\n                        </Route>\r\n                        <Route path=\"/logout\">\r\n                            <Logout\r\n                                setToken={setToken}\r\n                                setUserEmail={setUserEmail}\r\n                            />\r\n                        </Route>\r\n                        <Route path=\"/changepassword\">\r\n                            <ResetPassword\r\n                                userEmail={userEmail}\r\n                                token={token}\r\n                            />\r\n                        </Route>\r\n                        <Route path=\"/\">\r\n                            <h1>Main Page</h1>\r\n                        </Route>\r\n                    </Switch>\r\n                </Typography>\r\n            )}\r\n            {!token && (\r\n                <Login setToken={setToken} setUserEmail={setUserEmail} />\r\n            )}\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default MainContent;\r\n","import \"./App.css\";\r\nimport NavBar from \"./components/navigation/NavBar\";\r\nimport MainContent from \"./components/MainContent\";\r\nimport useToken from \"./components/login/useToken\";\r\nimport useEmail from \"./components/login/useEmail\";\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\n\r\nfunction App() {\r\n    const { token, setToken } = useToken();\r\n\r\n    const { userEmail, setUserEmail } = useEmail();\r\n\r\n    return (\r\n        <Router className=\"App\">\r\n            <NavBar token={token} userEmail={userEmail} />\r\n            <MainContent\r\n                token={token}\r\n                setToken={setToken}\r\n                userEmail={userEmail}\r\n                setUserEmail={setUserEmail}\r\n            />\r\n        </Router>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { useState } from \"react\";\r\n\r\nexport default function useToken() {\r\n    const getToken = () => {\r\n        const tokenString = localStorage.getItem(\"token\");\r\n        const userToken = JSON.parse(tokenString);\r\n        return userToken;\r\n    };\r\n\r\n    const [token, setToken] = useState(getToken());\r\n\r\n    const saveToken = (userToken) => {\r\n        localStorage.setItem(\"token\", JSON.stringify(userToken));\r\n        setToken(userToken);\r\n    };\r\n\r\n    return {\r\n        setToken: saveToken,\r\n        token,\r\n    };\r\n}\r\n","import { useState } from \"react\";\r\n\r\nexport default function useEmail() {\r\n    const getEmail = () => {\r\n        const emailString = localStorage.getItem(\"email\");\r\n        const userEmail = JSON.parse(emailString);\r\n        return userEmail;\r\n    };\r\n\r\n    const [userEmail, setEmail] = useState(getEmail());\r\n\r\n    const saveToken = (userEmail) => {\r\n        localStorage.setItem(\"email\", JSON.stringify(userEmail));\r\n        setEmail(userEmail);\r\n    };\r\n\r\n    return {\r\n        setUserEmail: saveToken,\r\n        userEmail,\r\n    };\r\n}\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}