@using Models
@model Tuple<List<Models.WorkQueueItemModel>, List<string>>

@{
    ViewData["Title"] = "BP Work Queue Item";
    string[] TableHeaders = new string[]
    {
    "State"
    ,"Item Key"
    ,"Completed Time"
    ,"Exceptioned Time"
    ,"Exception Reason"
    ,"Deferred Until"
    ,"Finished"
    ,"Action"
    ,"Last Updated"
    ,"Loaded"
    ,"Status"
    ,"Work Time"
    ,"Priority"
    ,"Attempt"
    ,"SLA"
    ,"SLA Date"
    };

    Layout = "_Layout";

}
<link rel="stylesheet" href="/css/table.css" />

<script>

    $(window).resize(function () {
        $(window).width();
    });
    $(document).ready(function () {
        $("#loaderDiv").show();
        set_table();
        $('#QueueItems tbody').on('click', 'tr.clickable-row', function () {
            var tr = $(this);
            var nextRow = tr.next('tr.collapsible');

            if (nextRow.length) {
                nextRow.toggle();
                $('#QueueItems').DataTable().columns.adjust().draw();
            }
        });
    });

    $('.changeBodyBackgroundFullColor').on('click', function () {
        if ($(this).attr('data-color') == 'default') {
            $('body').removeAttr('data-background-full');
        } else {
            $('body').attr('data-background-full', $(this).attr('data-color'));
        }

        $(this).parent().find('.changeBodyBackgroundFullColor').removeClass("selected");
        $(this).addClass("selected");
        layoutsColors();
    });

    $('.changeLogoHeaderColor').on('click', function () {
        if ($(this).attr('data-color') == 'default') {
            $('.logo-header').removeAttr('data-background-color');
        } else {
            $('.logo-header').attr('data-background-color', $(this).attr('data-color'));
        }

        $(this).parent().find('.changeLogoHeaderColor').removeClass("selected");
        $(this).addClass("selected");
        customCheckColor();
        layoutsColors();
    });

    $('.changeTopBarColor').on('click', function () {
        if ($(this).attr('data-color') == 'default') {
            $('.main-header .navbar-header').removeAttr('data-background-color');
        } else {
            $('.main-header .navbar-header').attr('data-background-color', $(this).attr('data-color'));
        }

        $(this).parent().find('.changeTopBarColor').removeClass("selected");
        $(this).addClass("selected");
        layoutsColors();
    });

    $('.changeSideBarColor').on('click', function () {
        if ($(this).attr('data-color') == 'default') {
            $('.sidebar').removeAttr('data-background-color');
        } else {
            $('.sidebar').attr('data-background-color', $(this).attr('data-color'));
        }

        $(this).parent().find('.changeSideBarColor').removeClass("selected");
        $(this).addClass("selected");
        layoutsColors();
    });

    $('.changeBackgroundColor').on('click', function () {
        $('body').removeAttr('data-background-color');
        $('body').attr('data-background-color', $(this).attr('data-color'));
        $(this).parent().find('.changeBackgroundColor').removeClass("selected");
        $(this).addClass("selected");
    });

    function customCheckColor() {
        var logoHeader = $('.logo-header').attr('data-background-color');
        if (logoHeader !== "white") {
            $('.logo-header .navbar-brand').attr('src', '/img/logo.svg');
        } else {
            $('.logo-header .navbar-brand').attr('src', '/img/logo2.svg');
        }
    }


    var toggle_customSidebar = false,
        custom_open = 0;

    if (!toggle_customSidebar) {
        var toggle = $('.custom-template .custom-toggle');

        toggle.on('click', (function () {
            if (custom_open == 1) {
                $('.custom-template').removeClass('open');
                toggle.removeClass('toggled');
                custom_open = 0;
            } else {
                $('.custom-template').addClass('open');
                toggle.addClass('toggled');
                custom_open = 1;
            }
        })
        );
        toggle_customSidebar = true;
    }
    function confirmDelete(event, itemId, queueid) {
        event.preventDefault();
        console.log(itemId);
        const confirmation = confirm("Are you sure you want to delete this item?");
        if (confirmation) {
            alert("Item has been removed from the Queue");
            window.location.href = `/WorkQueueItem/Delete?id=` + itemId + '&queueId=' + queueid;
        }
    }
    function confirmRetry(event, itemId, queueid) {
        event.preventDefault();
        const confirmation = confirm("Are you sure you want to rerun this item?");
        if (confirmation) {
            alert("Item has been moved to pending status")
            window.location.href = `/WorkQueueItem/Retry?id=` + itemId + '&queueId=' + queueid;
        }
    }
    function set_table() {
        const table = $("#QueueItems").DataTable({
            "pageLength": 10,
            "order": [[10,"desc"]],
            initComplete: function () {
                this.api().columns().every(function () {
                    var column = this;
                    var select = $('<select class="form-control"><option value=""></option></select>')
                        .appendTo($(column.footer()).empty())
                        .on('change', function () {
                            var val = $.fn.dataTable.util.escapeRegex(
                                $(this).val()
                            );

                            column
                                .search(val ? '^' + val + '$' : '', true, false)
                                .draw();
                        });

                    column.data().unique().sort().each(function (d, j) {
                        select.append('<option value="' + d + '">' + d + '</option>')
                    });
                });
            }
        });
        $('#QueueItems tbody').on('click', 'tr.clickable-row', function () {
            var tr = $(this);
            var row = table.row(tr);

            if (row.child.isShown()) {
                row.child.hide();
                tr.removeClass('shown');
            } else {
                var data = '<div class="collapsible-content"><p>' + tr.find('td').eq(0).text().replace("row:\n", "").replace(/\n/g, '<br>') + '</p></div>';
                row.child(data).show();
                tr.addClass('shown');
            }
        });
    }
</script>

<link rel="stylesheet" href="/css/demo.css">
<h3>@ViewData["Title"]</h3>
<div class="content">
    <div class="page-inner">
        <div class="page-header">
            <h4 class="page-title">BP Work Queue</h4>
            <ul class="breadcrumbs">
                <li class="nav-home">
                    <a asp-area="" asp-controller="WorkQueue" asp-action="WorkQueue">
                        <span class="icon-control-rewind">WorkQueues</span>
                    </a>
                </li>
                <li class="nav-home">
                </li>
                <li class="nav-home">
                </li>
                <li class="nav-home">
                </li>
                <li class="nav-home">
                    <a href="/Home">
                        <i class="flaticon-home"></i>
                    </a>
                </li>
            </ul>
        </div>
        <div class="col-md-12">
            <div class="card">
                <div class="card-header">
                    <h4 class="card-title" id="itemTitle">
                        Queue Item
                    </h4>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table id="QueueItems" class="display table table-striped table-hover">
                            <thead>
                                <tr>
                                    @{
                                        <th  style="display: none;">Data</th>
                                        foreach (var head in TableHeaders)
                                        {
                                            <th>
                                                @head
                                            </th>
                                        }
                                    }
                                </tr>
                            </thead>
                            <tbody>
                                @{
                                    if (Model.Item1 != null && Model.Item1.Any())
                                    {
                                        TimeZoneInfo easternZone = TimeZoneInfo.FindSystemTimeZoneById("Eastern Standard Time");
                                        foreach (var item in Model.Item1)
                                        {
                                            if (item.loaded.HasValue)
                                            {
                                                item.loaded = TimeZoneInfo.ConvertTimeFromUtc((DateTime)item.loaded, easternZone);
                                            }
                                            if (item.completed.HasValue)
                                            {
                                                item.completed = TimeZoneInfo.ConvertTimeFromUtc((DateTime)item.completed, easternZone);
                                            }
                                            if (item.exception.HasValue)
                                            {
                                                item.exception = TimeZoneInfo.ConvertTimeFromUtc((DateTime)item.exception, easternZone);
                                            }
                                            if (item.deferred.HasValue)
                                            {
                                                item.deferred = TimeZoneInfo.ConvertTimeFromUtc((DateTime)item.deferred, easternZone);
                                            }
                                            if (item.lastupdated.HasValue)
                                            {
                                                item.lastupdated = TimeZoneInfo.ConvertTimeFromUtc((DateTime)item.lastupdated, easternZone);
                                            }
                                            if (item.finished.HasValue)
                                            {
                                                item.finished = TimeZoneInfo.ConvertTimeFromUtc((DateTime)item.finished, easternZone);
                                            }
                                            if (item.sladatetime.HasValue)
                                            {
                                                item.sladatetime = TimeZoneInfo.ConvertTimeFromUtc((DateTime)item.sladatetime, easternZone);
                                            }
                                            <script>
                                                document.getElementById("itemTitle").innerText = '@item.name'.replace(/'/g, "\\'");
                                            </script>
                                            <tr id="row-@item.keyvalue" class="clickable-row">
                                                <td style="display: none;">@(item.data?.ToString() ?? "")</td>
                                                @{
                                                        if (item.completed.HasValue)
                                                        {
                                                        <td class="d-inline align-middle d-flex justify-content-center align-items-center">
                                                            <svg class="text-success" xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-check-circle-fill" viewBox="0 0 16 16">
                                                                <path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0m-3.97-3.03a.75.75 0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-.01-1.05z" />
                                                        </svg>Completed</td>
                                                        //COMPLETED
                                                        }
                                                        else if (item.exception.HasValue)
                                                        {
                                                        //EXCEPTION
                                                        <td class="d-inline align-middle d-flex justify-content-center align-items-center">
                                                            <svg class="text-danger" xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-exclamation-circle-fill" viewBox="0 0 16 16">
                                                                <path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0M8 4a.905.905 0 0 0-.9.995l.35 3.507a.552.552 0 0 0 1.1 0l.35-3.507A.905.905 0 0 0 8 4m.002 6a1 1 0 1 0 0 2 1 1 0 0 0 0-2" />
                                                            </svg> Exceptioned</td>
                                                        }
                                                        else if (item.deferred.HasValue)
                                                        {
                                                            if (item.deferred > DateTime.Now)
                                                            {
                                                            //DEFERRED
                                                            <td class="d-inline align-middle d-flex justify-content-center align-items-center">
                                                                <svg class="text-warning" xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-hourglass-split" viewBox="0 0 16 16">
                                                                    <path d="M2.5 15a.5.5 0 1 1 0-1h1v-1a4.5 4.5 0 0 1 2.557-4.06c.29-.139.443-.377.443-.59v-.7c0-.213-.154-.451-.443-.59A4.5 4.5 0 0 1 3.5 3V2h-1a.5.5 0 0 1 0-1h11a.5.5 0 0 1 0 1h-1v1a4.5 4.5 0 0 1-2.557 4.06c-.29.139-.443.377-.443.59v.7c0 .213.154.451.443.59A4.5 4.5 0 0 1 12.5 13v1h1a.5.5 0 0 1 0 1zm2-13v1c0 .537.12 1.045.337 1.5h6.326c.216-.455.337-.963.337-1.5V2zm3 6.35c0 .701-.478 1.236-1.011 1.492A3.5 3.5 0 0 0 4.5 13s.866-1.299 3-1.48zm1 0v3.17c2.134.181 3 1.48 3 1.48a3.5 3.5 0 0 0-1.989-3.158C8.978 9.586 8.5 9.052 8.5 8.351z" />
                                                                </svg>Deferred</td>
                                                            }
                                                            else
                                                            {

                                                            //PENDING
                                                            <td class="d-inline align-middle d-flex justify-content-center align-items-center">
                                                                <svg class="text-info" width="40" height="24" viewBox="0 0 40 24" xmlns="http://www.w3.org/2000/svg">
                                                                    <circle cx="20" cy="12" r="10" fill="none" stroke="currentColor" stroke-width="2" />
                                                                    <circle cx="12" cy="12" r="2" fill="currentColor" />
                                                                    <circle cx="20" cy="12" r="2" fill="currentColor" />
                                                                    <circle cx="28" cy="12" r="2" fill="currentColor" />
                                                                </svg>Pending</td>
                                                            }
                                                        }
                                                        else
                                                        {
                                                            //PENDING
                                                        <td class="d-inline align-middle d-flex justify-content-center align-items-center">
                                                            <svg class="text-info" width="40" height="24" viewBox="0 0 40 24" xmlns="http://www.w3.org/2000/svg">
                                                                <circle cx="20" cy="12" r="10" fill="none" stroke="currentColor" stroke-width="2" />
                                                                <circle cx="12" cy="12" r="2" fill="currentColor" />
                                                                <circle cx="20" cy="12" r="2" fill="currentColor" />
                                                                <circle cx="28" cy="12" r="2" fill="currentColor" />
                                                            </svg>Pending</td>
                                                        }
                                                    }
                                                <td>@(item.keyvalue?.ToString() ?? "")</td>
                                                <td>@(item.completed?.ToString("MM/dd/yyyy hh:mm tt") ?? "")</td>
                                                <td>@(item.exception?.ToString("MM/dd/yyyy hh:mm tt") ?? "")</td>
                                                <td>@(item.exceptionreason?.ToString() ?? "")</td>
                                                <td>@(item.deferred?.ToString("MM/dd/yyyy hh:mm tt") ?? "")</td>
                                                <td>@(item.finished?.ToString("MM/dd/yyyy hh:mm tt") ?? "")</td>
                                                <td>
                                                    <div class="btn-group btn-group-sm">
                                                        <a asp-controller="WorkQueueItem" asp-action="Tags" asp-route-id=@item.keyvalue.ToString() class="btn btn-primary mr-1" style="margin-right: 4px">View Tag</a>
                                                        @*@if (@User.Identity.Name.ToLower() in Model.Item2)*@
                                                        @if (Model.Item2.Contains(User.Identity.Name.ToLower()))
                                                        {
                                                            @if (item.exception.HasValue)
                                                            { //Set exception and exception reason to null to retry
                                                                <a href="#" class="btn btn-warning" style="margin-right: 4px" onclick="confirmRetry(event, '@item.id', '@item.queueid')">Retry</a>
                                                                // <a asp-controller="WorkQueueItem" asp-action="Retry" asp-route-id="@item.id" class="btn btn-warning" style="margin-right: 4px">Retry</a>
                                                            }
                                                            <a href="#" class="btn btn-danger" onclick="confirmDelete(event, '@item.id', '@item.queueid')">Delete</a>
                                                        }
                                                    </div>
                                                </td>
                                                <td>@(item.lastupdated?.ToString("MM/dd/yyyy hh:mm tt") ?? "")</td>
                                                <td>@(item.loaded?.ToString("MM/dd/yyyy hh:mm tt") ?? "")</td>
                                                <td>@item.status</td>
                                                <td>@item.worktime</td>
                                                <td>@item.priority</td>
                                                <td>@item.attempt</td>
                                                <td>@item.sla</td>
                                                <td>@(item.sladatetime?.ToString("MM/dd/yyyy hh:mm tt") ?? "")</td>
                                            </tr>
                                            // <tr class="collapsible" style="display: none;">
                                            //     <td colspan=@TableHeaders.Length - 1>
                                            //         <div class="collapsible-content">
                                            //             <p>@item.data</p>
                                            //         </div>
                                            //     </td>
                                            // </tr>
                                        }
                                    }
                                    else
                                    {
                                        <tr>
                                            <td colspan=@TableHeaders.Length - 1>
                                                <div>
                                                    No Items Available at this moment.
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                }
                            </tbody>
                            <tfoot>
                                <tr>
                                    @{
                                        <th  style="display: none;">Data</th>
                                        foreach (var head in TableHeaders)
                                        {
                                            <th>
                                                @head
                                            </th>
                                        }
                                    }
                                </tr>
                            </tfoot>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>